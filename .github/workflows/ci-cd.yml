name: Build, Tag, Push Docker Image, and Manage OCI Container

on:
  push:
    branches:
      - main

jobs:
  build-publish-manage:
    name: Build, Push Docker Image, and Manage OCI Container
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCI_COMPARTMENT_OCID: ${{ secrets.OCI_COMPARTMENT_OCID }}
      OCIR_REGISTRY: ${{ secrets.OCIR_REGISTRY }}
      OCI_AUTH_TOKEN: ${{ secrets.OCI_AUTH_TOKEN }}
      LOGICAL_AD: ${{ secrets.LOGICAL_AD }}
      SUBNET_OCID: ${{ secrets.SUBNET_OCID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install OCI CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install oci-cli

      - name: Get or create an OCIR repository
        uses: oracle-actions/get-ocir-repository@v1.3.0
        id: get-ocir-repository
        with:
          name: cicd
          compartment: ${{ secrets.OCI_COMPARTMENT_OCID }}

      - name: Log into OCIR
        uses: oracle-actions/login-ocir@v1.3.0
        with:
          auth_token: ${{ secrets.OCI_AUTH_TOKEN }}

      - name: Determine new version tag
        id: determine-version
        run: |
          if [ -f .version ]; then
            PREVIOUS_VERSION=$(cat .version)
            echo "Previous version: $PREVIOUS_VERSION"
          else
            PREVIOUS_VERSION="v1.0.0"
          fi
          BASE_VERSION=$(echo "$PREVIOUS_VERSION" | sed 's/v//')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "$NEW_VERSION" > .version
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_ENV

      - name: Commit version file
        run: |
          git config --local user.name "harishsp1996"
          git config --local user.email "harish.sp.4196@gmail.com"
          git add .version
          git commit -m "Update version to $VERSION"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker buildx build --platform linux/amd64 -t cicd:${{ env.VERSION }} .
          docker tag cicd:${{ env.VERSION }} ${{ steps.get-ocir-repository.outputs.repo_path }}:${{ env.VERSION }}
          docker tag cicd:${{ env.VERSION }} ${{ steps.get-ocir-repository.outputs.repo_path }}:latest

      - name: Push Docker image to OCIR
        run: |
          docker push ${{ steps.get-ocir-repository.outputs.repo_path }}:${{ env.VERSION }}
          docker push ${{ steps.get-ocir-repository.outputs.repo_path }}:latest

      - name: Delete previous container instance
        run: |
          PREVIOUS_INSTANCE_NAME="icsapplication-${{ env.PREVIOUS_VERSION }}"
          INSTANCE_ID=$(oci container-instances container-instance list \
            --compartment-id $OCI_COMPARTMENT_OCID \
            --display-name "$PREVIOUS_INSTANCE_NAME" \
            --query "data[0].id" --raw-output)
          if [ -n "$INSTANCE_ID" ]; then
            echo "Deleting previous container instance with ID: $INSTANCE_ID"
            oci container-instances container-instance delete --container-instance-id "$INSTANCE_ID" --force

            echo "Waiting for deletion to complete..."
            while true; do
              STATUS=$(oci container-instances container-instance get \
                --container-instance-id "$INSTANCE_ID" \
                --query "data.lifecycle-state" --raw-output 2>/dev/null || echo "DELETED")
              if [ "$STATUS" == "DELETED" ]; then
                echo "Previous instance successfully deleted."
                break
              fi
              echo "Current status: $STATUS. Retrying in 10 seconds..."
              sleep 10
            done
          else
            echo "No container instance found with name: $PREVIOUS_INSTANCE_NAME"
          fi

      - name: Create new container instance
        run: |
          INSTANCE_NAME="icsapplication-${{ env.VERSION }}"
          IMAGE_PATH="${{ steps.get-ocir-repository.outputs.repo_path }}:${{ env.VERSION }}"
          SHAPE_CONFIG_JSON='{"ocpus": 2, "memoryInGBs": 2}'
          VNIC_JSON="[{\"subnetId\": \"$SUBNET_OCID\"}]"
          CONTAINER_JSON="[{
            \"imageUrl\": \"$IMAGE_PATH\"
          }]"

          echo "Creating new container instance with name: $INSTANCE_NAME"
          oci container-instances container-instance create \
            --compartment-id "$OCI_COMPARTMENT_OCID" \
            --availability-domain "$LOGICAL_AD" \
            --display-name "$INSTANCE_NAME" \
            --shape "CI.Standard.E4.Flex" \
            --shape-config "$SHAPE_CONFIG_JSON" \
            --containers "$CONTAINER_JSON" \
            --vnics "$VNIC_JSON"

    post:
      always:
        steps:
          - name: Revert version file if build failed
            if: failure() && env.VERSION && env.PREVIOUS_VERSION
            run: |
              echo "Reverting version file to previous version: ${{ env.PREVIOUS_VERSION }}"
              echo "${{ env.PREVIOUS_VERSION }}" > .version
              git config --local user.name "harishsp1996"
              git config --local user.email "harish.sp.4196@gmail.com"
              git add .version
              git commit -m "Revert version to ${{ env.PREVIOUS_VERSION }}"
              git push
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          - name: Send Failure Email Notification
            if: failure()
            run: |
              echo "Build failed at step: ${{ github.step.name }}"
              echo "Sending failure notification email..."
              echo "Subject: Build Failed: ${{ github.step.name }}" > email.txt
              echo "Build of version ${{ env.VERSION }} failed during step: ${{ github.step.name }}" >> email.txt
              echo "" >> email.txt
              echo "Check logs for more details." >> email.txt
              sendmail "${{ secrets.NOTIFICATION_EMAIL }}" < email.txt

          - name: Send Success Email Notification
            if: success()
            run: |
              echo "Build succeeded!"
              echo "Sending success notification email..."
              echo "Subject: Build Successful: Version ${{ env.VERSION }}" > email.txt
              echo "Build of version ${{ env.VERSION }} completed successfully." >> email.txt
              sendmail "${{ secrets.NOTIFICATION_EMAIL }}" < email.txt
