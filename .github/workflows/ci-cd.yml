- name: Create new container instance and wait for status
  run: |
    VERSION="${{ env.VERSION }}"
    IMAGE_PATH="${{ steps.get-ocir-repository.outputs.repo_path }}:$VERSION"
    INSTANCE_NAME="icsapp$VERSION"
    SHAPE_CONFIG_JSON='{"ocpus": 2, "memoryInGBs": 2}'
    VNIC_JSON="[{\"subnetId\": \"$SUBNET_OCID\"}]"
    CONTAINER_JSON="[{
      \"imageUrl\": \"$IMAGE_PATH\"
    }]"

    NEW_INSTANCE=$(oci container-instances container-instance create \
      --compartment-id "$OCI_COMPARTMENT_OCID" \
      --availability-domain "$LOGICAL_AD" \
      --shape "CI.Standard.E4.Flex" \
      --shape-config "$SHAPE_CONFIG_JSON" \
      --containers "$CONTAINER_JSON" \
      --vnics "$VNIC_JSON" \
      --display-name "$INSTANCE_NAME" \
      --query "data.id" --raw-output)

    echo "Created new container instance with ID: $NEW_INSTANCE"

    # Wait for instance to become ACTIVE or FAILED
    while true; do
      echo "Checking lifecycle state of $INSTANCE_NAME..."
      STATUS=$(oci container-instances container-instance get \
        --container-instance-id "$NEW_INSTANCE" \
        --query "data.lifecycle-state" --raw-output)

      echo "Current status: $STATUS"
      if [[ "$STATUS" == "ACTIVE" || "$STATUS" == "FAILED" ]]; then
        echo "Instance status: $STATUS"
        break
      fi
      sleep 10
    done

    if [ "$STATUS" == "ACTIVE" ]; then
      # Send success email
      oci ons message publish --topic-id $OCI_NOTIFICATION_TOPIC_OCID \
        --body "{\"status\": \"success\", \"version\": \"$NEW_VERSION\", \"message\": \"Build and deployment successful.\"}"
    else
      # Send failure email
      oci ons message publish --topic-id $OCI_NOTIFICATION_TOPIC_OCID \
        --body "{\"status\": \"failure\", \"version\": \"$NEW_VERSION\", \"message\": \"Build failed at step: ${{ job.status }}\"}"
    fi
