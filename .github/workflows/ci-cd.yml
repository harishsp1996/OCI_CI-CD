name: OCI Container Image Delete and Revert

on:
  push:
    branches:
      - main  # Trigger for main branch push

jobs:
  container:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up OCI CLI
      - name: Set up OCI CLI
        run: |
          curl -L https://github.com/oracle/oci-cli/releases/download/v3.17.0/oci-cli-linux.zip -o oci-cli-linux.zip
          unzip oci-cli-linux.zip -d oci-cli
          sudo ./oci-cli/install.sh
          echo "OCI CLI installed."

      # Step 3: Set up environment variables (replace with actual values)
      - name: Set up environment variables
        run: |
          echo "OCI_COMPARTMENT_OCID=your_compartment_ocid" >> $GITHUB_ENV
          echo "OCI_CLI_REGION=ap-mumbai-1" >> $GITHUB_ENV
          echo "CURRENT_VERSION=v6.0.9" >> $GITHUB_ENV

      # Step 4: Get image list from OCIR
      - name: Get previous image OCID
        run: |
          # Fetch the image list from OCIR
          IMAGE_LIST=$(oci artifacts container image list \
            --compartment-id "$OCI_COMPARTMENT_OCID" \
            --repository-name "cicd" \
            --region "$OCI_CLI_REGION" \
            --raw-output)

          # Extract the image OCID for the current version (e.g., cicd:v6.0.9)
          IMAGE_OCID=$(echo "$IMAGE_LIST" | jq -r '.data[] | select(.["display-name"] == "cicd:'$CURRENT_VERSION'") | .id')

          # Check if the image OCID exists and delete it
          if [ -n "$IMAGE_OCID" ]; then
            echo "Deleting image with OCID: $IMAGE_OCID"
            oci artifacts container image delete \
              --image-id "$IMAGE_OCID" \
              --force \
              --region "$OCI_CLI_REGION"
          else
            echo "No image found for version $CURRENT_VERSION"
          fi

      # Step 5: Build and push new Docker image (this step is customized based on your pipeline)
      - name: Build and push Docker image
        run: |
          # Example: Build Docker image with tag v6.0.9
          docker build -t cicd:$CURRENT_VERSION .
          docker push cicd:$CURRENT_VERSION

      # Step 6: Create new container instance or update existing one
      - name: Create or update container instance
        run: |
          # Create a new container instance or update with the new image
          oci container-instances container-instance create \
            --compartment-id "$OCI_COMPARTMENT_OCID" \
            --image "cicd:$CURRENT_VERSION" \
            --region "$OCI_CLI_REGION" \
            --instance-type VM.Standard.E2.1.Micro \
            --display-name "NewContainerInstance" \
            --assign-public-ip true
