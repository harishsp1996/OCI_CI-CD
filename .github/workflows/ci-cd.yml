      - name: Delete previous container instance
        run: |
          # Fetch the current version from the .version file
          CURRENT_VERSION=$(cat .version)
          echo "Current version: $CURRENT_VERSION"

          # Calculate previous version (e.g., v1.0.1 -> v1.0.0)
          BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/v//')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          PATCH=$((PATCH - 1))  # Decrement the patch version to get previous version
          PREVIOUS_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "Previous version: $PREVIOUS_VERSION"

          # Build the previous version's container instance name
          PREVIOUS_INSTANCE_NAME="icsapplication${PREVIOUS_VERSION}"

          # Query OCI for the instance ID using the previous version name
          INSTANCE_ID=$(oci container-instances container-instance list \
            --compartment-id $OCI_COMPARTMENT_OCID \
            --display-name "$PREVIOUS_INSTANCE_NAME" \
            --query "data[0].id" --raw-output)

          if [ -n "$INSTANCE_ID" ]; then
            echo "Deleting previous container instance with ID: $INSTANCE_ID"
            
            # Delete the previous container instance using its ID
            oci container-instances container-instance delete --container-instance-id "$INSTANCE_ID" --force

            # Wait until the deletion is complete
            echo "Waiting for the deletion to complete..."
            while true; do
              STATUS=$(oci container-instances container-instance get \
                --container-instance-id "$INSTANCE_ID" \
                --query "data.lifecycle-state" --raw-output 2>/dev/null || echo "DELETED")
              
              if [ "$STATUS" == "DELETED" ]; then
                echo "Previous instance successfully deleted."
                break
              fi
              echo "Current status: $STATUS. Retrying in 10 seconds..."
              sleep 10
            done
          else
            echo "No container instance found with name: $PREVIOUS_INSTANCE_NAME"
          fi

      - name: Create new container instance
        run: |
          VERSION="${{ env.VERSION }}"
          IMAGE_PATH="${{ steps.get-ocir-repository.outputs.repo_path }}:$VERSION"
          SHAPE_CONFIG_JSON='{"ocpus": 2, "memoryInGBs": 2}'
          VNIC_JSON="[{\"subnetId\": \"$SUBNET_OCID\"}]"
          CONTAINER_JSON="[{
            \"imageUrl\": \"$IMAGE_PATH\"
          }]"

          # New container instance name without hyphen
          NEW_INSTANCE_NAME="icsapplication${VERSION}"

          echo "Creating new container instance: $NEW_INSTANCE_NAME with image: $IMAGE_PATH"
          NEW_INSTANCE=$(oci container-instances container-instance create \
            --compartment-id "$OCI_COMPARTMENT_OCID" \
            --availability-domain "$LOGICAL_AD" \
            --shape "CI.Standard.E4.Flex" \
            --shape-config "$SHAPE_CONFIG_JSON" \
            --display-name "$NEW_INSTANCE_NAME" \
            --containers "$CONTAINER_JSON" \
            --vnics "$VNIC_JSON" \
            --query "data.id" --raw-output)

          if [ $? -ne 0 ]; then
            echo "Failed to create container instance."
            exit 1
          fi

          echo "New container instance created with ID: $NEW_INSTANCE"
