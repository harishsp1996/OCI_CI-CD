name: Build, Tag, Push Docker Image, and Manage OCI Container

on:
  push:
    branches:
      - main

jobs:
  build-publish-manage:
    name: Build, Push Docker Image, and Manage OCI Container
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCI_COMPARTMENT_OCID: ${{ secrets.OCI_COMPARTMENT_OCID }}
      OCIR_REGISTRY: ${{ secrets.OCIR_REGISTRY }}
      OCI_AUTH_TOKEN: ${{ secrets.OCI_AUTH_TOKEN }}
      LOGICAL_AD: ${{ secrets.LOGICAL_AD }}
      SUBNET_OCID: ${{ secrets.SUBNET_OCID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      OCI_NOTIFICATION_TOPIC_OCID: ${{ secrets.OCI_NOTIFICATION_TOPIC_OCID }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install OCI CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install oci-cli

      - name: Get or create an OCIR repository
        uses: oracle-actions/get-ocir-repository@v1.3.0
        id: get-ocir-repository
        with:
          name: cicd
          compartment: ${{ secrets.OCI_COMPARTMENT_OCID }}

      - name: Log into OCIR
        uses: oracle-actions/login-ocir@v1.3.0
        with:
          auth_token: ${{ secrets.OCI_AUTH_TOKEN }}

      - name: Determine new version tag
        id: determine-version
        run: |
          if [ -f .version ]; then
            VERSION=$(cat .version)
            echo "Current version: $VERSION"
          else
            VERSION="v9.0.0"
            echo "No version file found. Starting with version: $VERSION"
          fi
          BASE_VERSION=$(echo "$VERSION" | sed 's/v//')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "Next version: $NEW_VERSION"
          echo "$NEW_VERSION" > .version
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit version file
        run: |
          git config --local user.name "harishsp1996"
          git config --local user.email "harish.sp.4196@gmail.com"
          git add .version
          git commit -m "Update version to $NEW_VERSION"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          VERSION="${{ env.VERSION }}"
          docker buildx build --platform linux/amd64 -t cicd:$VERSION .
          docker tag cicd:$VERSION ${{ steps.get-ocir-repository.outputs.repo_path }}:$VERSION
          docker tag cicd:$VERSION ${{ steps.get-ocir-repository.outputs.repo_path }}:latest

      - name: Push Docker image to OCIR
        run: |
          VERSION="${{ env.VERSION }}"
          docker push ${{ steps.get-ocir-repository.outputs.repo_path }}:$VERSION
          docker push ${{ steps.get-ocir-repository.outputs.repo_path }}:latest

      - name: Delete previous container instance
        run: |
          CURRENT_VERSION=$(cat .version)
          BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/v//')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          PATCH=$((PATCH - 1))
          PREVIOUS_VERSION="v$MAJOR.$MINOR.$PATCH"
          PREVIOUS_INSTANCE_NAME="icsapp$PREVIOUS_VERSION"

          INSTANCE_ID=$(oci container-instances container-instance list \
            --compartment-id "$OCI_COMPARTMENT_OCID" \
            --region "$OCI_CLI_REGION" \
            --raw-output | jq -r '.data.items[] | select(.["display-name"] == "'$PREVIOUS_INSTANCE_NAME'" and .["lifecycle-state"] == "ACTIVE") | .id')

          if [ -n "$INSTANCE_ID" ]; then
            oci container-instances container-instance delete --container-instance-id "$INSTANCE_ID" --force
            while true; do
              STATUS=$(oci container-instances container-instance get \
                --container-instance-id "$INSTANCE_ID" \
                --query "data.lifecycle-state" --raw-output 2>/dev/null || echo "DELETED")
              if [ "$STATUS" == "DELETED" ]; then
                break
              fi
              sleep 10
            done
          fi

      - name: Delete the current image from OCIR
        run: |
          # Fetch the current version from .version file
          CURRENT_VERSION=$(cat .version)
          IMAGE_OCID=$(oci artifacts container image list \
            --compartment-id "$OCI_COMPARTMENT_OCID" \
            --query "data[?contains('display-name', '$CURRENT_VERSION')].id | [0]" \
            --raw-output)

          echo "Found IMAGE_OCID for current version $CURRENT_VERSION: $IMAGE_OCID"

          if [[ -n "$IMAGE_OCID" ]]; then
            echo "Deleting current image version $CURRENT_VERSION from OCIR registry..."
            oci artifacts container image delete \
              --image-id "$IMAGE_OCID" \
              --force
            echo "Current image version $CURRENT_VERSION deleted successfully."
          else
            echo "No image found for current version $CURRENT_VERSION. Skipping deletion."
          fi

      - name: Fetch the previous image OCID
        run: |
          CURRENT_VERSION=$(cat .version)
          BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/v//')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          PATCH=$((PATCH - 1))
          PREVIOUS_VERSION="v$MAJOR.$MINOR.$PATCH"
          PREVIOUS_IMAGE_OCID=$(oci artifacts container image list \
            --compartment-id "$OCI_COMPARTMENT_OCID" \
            --query "data[?contains('display-name', '$PREVIOUS_VERSION')].id | [0]" \
            --raw-output)

          echo "Previous image OCID for version $PREVIOUS_VERSION: $PREVIOUS_IMAGE_OCID"

          if [[ -n "$PREVIOUS_IMAGE_OCID" ]]; then
            echo "Previous image found. Proceeding with revert."
          else
            echo "Previous image not found. Skipping revert."
          fi

      - name: Create new container instance and wait for status
        run: |
          VERSION="${{ env.VERSION }}"
          IMAGE_PATH="${{ steps.get-ocir-repository.outputs.repo_path }}:$VERSION"
          INSTANCE_NAME="icsapp$VERSION"
          SHAPE_CONFIG_JSON='{"ocpus": 2, "memoryInGBs": 2}'
          VNIC_JSON="[{\"subnetId\": \"$SUBNET_OCID\"}]"
          CONTAINER_JSON="[{\"imageUrl\": \"$IMAGE_PATH\"}]"

          NEW_INSTANCE=$(oci container-instances container-instance create \
            --compartment-id "$OCI_COMPARTMENT_OCID" \
            --availability-domain "$LOGICAL_AD" \
            --shape "CI.Standard.E4.Flex" \
            --shape-config "$SHAPE_CONFIG_JSON" \
            --containers "$CONTAINER_JSON" \
            --vnics "$VNIC_JSON" \
            --display-name "$INSTANCE_NAME" \
            --query "data.id" --raw-output)

          echo "Created new container instance with ID: $NEW_INSTANCE"

          # Wait for instance to become ACTIVE or FAILED
          while true; do
            echo "Checking lifecycle state of $INSTANCE_NAME..."
            CURRENT_STATUS=$(oci container-instances container-instance list \
              --compartment-id "$OCI_COMPARTMENT_OCID" \
              --region "$OCI_CLI_REGION" \
              --raw-output | jq -r '.data.items[] | select(.["display-name"] == "'$INSTANCE_NAME'") | .["lifecycle-state"]')

            echo "Current status: $CURRENT_STATUS"

            if [[ "$CURRENT_STATUS" == "ACTIVE" ]]; then
              echo "Status ACTIVE found, breaking the loop."
              oci ons message publish --topic-id $OCI_NOTIFICATION_TOPIC_OCID \
                --body "{\"status\": \"success\", \"version\": \"$VERSION\", \"message\": \"Build and deployment successful.\"}"
              break
            elif [[ "$CURRENT_STATUS" == "FAILED" ]]; then
              echo "Status FAILED found, breaking the loop."
              oci ons message publish --topic-id $OCI_NOTIFICATION_TOPIC_OCID \
                --body "{\"status\": \"failure\", \"version\": \"$VERSION\", \"message\": \"Build failed.\"}"

              # Start reverting process
              echo "No worries, I am going to revert to the previous container image."

              # Delete the failed container instance
              FAILED_INSTANCE_ID=$(oci container-instances container-instance list \
                --compartment-id "$OCI_COMPARTMENT_OCID" \
                --region "$OCI_CLI_REGION" \
                --raw-output | jq -r '.data.items[] | select(.["display-name"] == "'$INSTANCE_NAME'" and .["lifecycle-state"] == "FAILED") | .id')

              if [ -n "$FAILED_INSTANCE_ID" ]; then
                oci container-instances container-instance delete --container-instance-id "$FAILED_INSTANCE_ID" --force
                while true; do
                  STATUS=$(oci container-instances container-instance get \
                    --container-instance-id "$FAILED_INSTANCE_ID" \
                    --query "data.lifecycle-state" --raw-output 2>/dev/null || echo "DELETED")
                  if [ "$STATUS" == "DELETED" ]; then
                    break
                  fi
                  sleep 10
                done
              fi

              # Revert the version to the previous one
              PREVIOUS_VERSION="v$MAJOR.$MINOR.$((PATCH - 1))"
              echo "Reverting to previous version: $PREVIOUS_VERSION"
              echo "$PREVIOUS_VERSION" > .version
              echo "VERSION=$PREVIOUS_VERSION" >> $GITHUB_ENV

              # Add delay before deleting the image
              sleep 10

              # Delete the image from OCIR
              echo "Deleting Docker image version $VERSION from OCIR registry..."
              IMAGE_OCID=$(oci artifacts container image list \
                --compartment-id "$OCI_COMPARTMENT_OCID" \
                --query "data[?contains('display-name', '$VERSION')].id | [0]" \
                --raw-output)

              echo "Found IMAGE_OCID: $IMAGE_OCID"

              if [[ -n "$IMAGE_OCID" ]]; then
                echo "Image OCID for version $VERSION found: $IMAGE_OCID. Deleting..."
                oci artifacts container image delete \
                  --image-id "$IMAGE_OCID" \
                  --force
                echo "Image version $VERSION deleted successfully."
              else
                echo "No image found for version $VERSION. Skipping deletion."
              fi

              # Recreate container with the previous version
              PREVIOUS_IMAGE_PATH="${{ steps.get-ocir-repository.outputs.repo_path }}:$VERSION"
              INSTANCE_NAME="icsapp$PREVIOUS_VERSION"
              NEW_INSTANCE=$(oci container-instances container-instance create \
                --compartment-id "$OCI_COMPARTMENT_OCID" \
                --availability-domain "$LOGICAL_AD" \
                --shape "CI.Standard.E4.Flex" \
                --shape-config "$SHAPE_CONFIG_JSON" \
                --containers "[{\"imageUrl\": \"$PREVIOUS_IMAGE_PATH\"}]" \
                --vnics "$VNIC_JSON" \
                --display-name "$INSTANCE_NAME" \
                --query "data.id" --raw-output)

              echo "Created new container instance with previous image, ID: $NEW_INSTANCE"

              # Wait for the previous version container to become ACTIVE
              while true; do
                echo "Checking lifecycle state of previous container instance..."
                CURRENT_STATUS=$(oci container-instances container-instance list \
                  --compartment-id "$OCI_COMPARTMENT_OCID" \
                  --region "$OCI_CLI_REGION" \
                  --raw-output | jq -r '.data.items[] | select(.["display-name"] == "'$INSTANCE_NAME'") | .["lifecycle-state"]')

                echo "Current status: $CURRENT_STATUS"

                if [[ "$CURRENT_STATUS" == "ACTIVE" ]]; then
                  echo "Reverted container is ACTIVE."
                  oci ons message publish --topic-id $OCI_NOTIFICATION_TOPIC_OCID \
                    --body "{\"status\": \"success\", \"version\": \"$PREVIOUS_VERSION\", \"message\": \"Reverted to previous version successfully.\"}"
                  break
                fi

                sleep 10
              done

              break
            else
              echo "Status is neither ACTIVE nor FAILED. Retrying..."
            fi

            # Sleep before checking again
            sleep 10
          done
