name: Build, Tag, Push Docker Image, and Manage OCI Container

on:
  push:
    branches:
      - main

jobs:
  build-publish-manage:
    name: Build, Push Docker Image, and Manage OCI Container
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCI_COMPARTMENT_OCID: ${{ secrets.OCI_COMPARTMENT_OCID }}
      OCIR_REGISTRY: ${{ secrets.OCIR_REGISTRY }}
      OCI_AUTH_TOKEN: ${{ secrets.OCI_AUTH_TOKEN }}
      LOGICAL_AD: ${{ secrets.LOGICAL_AD }}
      SUBNET_OCID: ${{ secrets.SUBNET_OCID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      OCI_NOTIFICATION_TOPIC_OCID: ${{ secrets.OCI_NOTIFICATION_TOPIC_OCID }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install OCI CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install oci-cli

      - name: Get or create an OCIR repository
        uses: oracle-actions/get-ocir-repository@v1.3.0
        id: get-ocir-repository
        with:
          name: cicd
          compartment: ${{ secrets.OCI_COMPARTMENT_OCID }}

      - name: Log into OCIR
        uses: oracle-actions/login-ocir@v1.3.0
        with:
          auth_token: ${{ secrets.OCI_AUTH_TOKEN }}

      - name: Determine new version tag
        id: determine-version
        run: |
          if [ -f .version ]; then
            VERSION=$(cat .version)
            echo "Current version: $VERSION"
          else
            VERSION="v1.0.0"
            echo "No version file found. Starting with version: $VERSION"
          fi
          BASE_VERSION=$(echo "$VERSION" | sed 's/v//')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "Next version: $NEW_VERSION"
          echo "$NEW_VERSION" > .version
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit version file
        run: |
          git config --local user.name "harishsp1996"
          git config --local user.email "harish.sp.4196@gmail.com"
          git add .version
          git commit -m "Update version to $VERSION"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          VERSION="${{ env.VERSION }}"
          echo "VERSION: $VERSION"
          docker buildx build --platform linux/amd64 -t cicd:$VERSION .
          docker tag cicd:$VERSION ${{ steps.get-ocir-repository.outputs.repo_path }}:$VERSION
          docker tag cicd:$VERSION ${{ steps.get-ocir-repository.outputs.repo_path }}:latest

      - name: Push Docker image to OCIR
        run: |
          VERSION="${{ env.VERSION }}"
          docker push ${{ steps.get-ocir-repository.outputs.repo_path }}:$VERSION
          docker push ${{ steps.get-ocir-repository.outputs.repo_path }}:latest

      - name: Delete previous container instance
        run: |
          VERSION="${{ env.VERSION }}"
          BASE_VERSION=$(echo "$VERSION" | sed 's/v//')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          PATCH=$((PATCH - 1)) # Get the previous version
          PREVIOUS_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "Deleting container instance for previous version: $PREVIOUS_VERSION"

          INSTANCE_ID=$(oci container-instances container-instance list \
            --compartment-id $OCI_COMPARTMENT_OCID \
            --display-name "icsapplication-${PREVIOUS_VERSION}" \
            --query "data[0].id" --raw-output)

          if [ -n "$INSTANCE_ID" ]; then
            echo "Deleting existing container instance with ID: $INSTANCE_ID"
            oci container-instances container-instance delete --container-instance-id "$INSTANCE_ID" --force
          else
            echo "No existing container instance found for version $PREVIOUS_VERSION."
          fi

      - name: Create new container instance
        run: |
          VERSION="${{ env.VERSION }}"
          IMAGE_PATH="${{ steps.get-ocir-repository.outputs.repo_path }}:$VERSION"
          SHAPE_CONFIG_JSON='{"ocpus": 2, "memoryInGBs": 2}'
          VNIC_JSON="[{\"subnetId\": \"$SUBNET_OCID\"}]"
          CONTAINER_JSON="[{
            \"imageUrl\": \"$IMAGE_PATH\"
          }]"

          echo "Creating new container instance with image: $IMAGE_PATH"
          NEW_INSTANCE=$(oci container-instances container-instance create \
            --compartment-id "$OCI_COMPARTMENT_OCID" \
            --availability-domain "$LOGICAL_AD" \
            --shape "CI.Standard.E4.Flex" \
            --shape-config "$SHAPE_CONFIG_JSON" \
            --containers "$CONTAINER_JSON" \
            --vnics "$VNIC_JSON" \
            --query "data.id" --raw-output)

          if [ $? -ne 0 ]; then
            echo "Failed to create container instance."
            exit 1
          fi

          echo "New container instance created with ID: $NEW_INSTANCE"

      - name: Notify build success
        run: |
          curl -X POST "https://notification.${{ secrets.OCI_CLI_REGION }}.oraclecloud.com/20181201/notifications/${{ secrets.OCI_NOTIFICATION_TOPIC_OCID }}/messages" \
          -H "Content-Type: application/json" \
          -d '{"message": "Build succeeded. New container instance created. Version: ${{ env.VERSION }}"}'
        env:
          OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
          OCI_NOTIFICATION_TOPIC_OCID: ${{ secrets.OCI_NOTIFICATION_TOPIC_OCID }}
          VERSION: ${{ env.VERSION }}

      - name: Notify build failure
        if: failure()
        run: |
          curl -X POST "https://notification.${{ secrets.OCI_CLI_REGION }}.oraclecloud.com/20181201/notifications/${{ secrets.OCI_NOTIFICATION_TOPIC_OCID }}/messages" \
          -H "Content-Type: application/json" \
          -d '{"message": "Build failed at step ${{ github.workflow }}. Version: ${{ env.VERSION }}"}'
        env:
          OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
          OCI_NOTIFICATION_TOPIC_OCID: ${{ secrets.OCI_NOTIFICATION_TOPIC_OCID }}
          VERSION: ${{ env.VERSION }}
