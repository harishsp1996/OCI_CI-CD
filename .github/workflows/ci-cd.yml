name: OCI Container Instance Deployment

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up OCI CLI
        uses: oracle/oci-cli-action@v1
        with:
          oci_api_key: ${{ secrets.OCI_API_KEY }}
          oci_tenancy: ${{ secrets.OCI_TENANCY }}
          oci_user: ${{ secrets.OCI_USER }}
          oci_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
          oci_region: "ap-mumbai-1"

      - name: Build and Push Docker Image
        run: |
          VERSION="v1.0.7"
          IMAGE_NAME="oci-registry/image:$VERSION"
          echo "Building Docker image: $IMAGE_NAME"
          
          # Build the Docker image
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
          
          echo "Docker image $IMAGE_NAME pushed to OCIR."

      - name: Deploy Container Instance
        run: |
          VERSION="v1.0.7"
          INSTANCE_NAME="icsapplicationv$VERSION"
          
          # Create a new container instance and get its ID
          NEW_INSTANCE=$(oci container-instances container-instance create \
            --compartment-id "$OCI_COMPARTMENT_OCID" \
            --region "$OCI_CLI_REGION" \
            --display-name "$INSTANCE_NAME" \
            --image "$IMAGE_NAME" \
            --subnet-id "$OCI_SUBNET_OCID" \
            --query "data.id" --raw-output)
          echo "Created new container instance: $NEW_INSTANCE"

          # Wait for the container instance to become ACTIVE or FAILED
          echo "Waiting for the container instance with name $INSTANCE_NAME to become ACTIVE or FAILED..."
          INSTANCE_ID=$(oci container-instances container-instance list \
            --compartment-id "$OCI_COMPARTMENT_OCID" \
            --region "$OCI_CLI_REGION" \
            --raw-output | jq -r '.data.items[] | select(.["display-name"] == "'"$INSTANCE_NAME"'" and .["lifecycle-state"] == "ACTIVE") | .id')

          if [ -z "$INSTANCE_ID" ]; then
            echo "Error: Container instance is not in ACTIVE state or not found."
            exit 1
          fi

          echo "Container instance with ID $INSTANCE_ID is ACTIVE."

          # If the status is not ACTIVE, delete the failed instance and revert changes
          STATUS=$(oci container-instances container-instance get \
            --container-instance-id "$INSTANCE_ID" \
            --query "data.lifecycle-state" --raw-output)
          
          while [ "$STATUS" != "ACTIVE" ] && [ "$STATUS" != "FAILED" ]; do
            echo "Current status: $STATUS. Waiting for ACTIVE or FAILED state..."
            sleep 10
            STATUS=$(oci container-instances container-instance get \
              --container-instance-id "$INSTANCE_ID" \
              --query "data.lifecycle-state" --raw-output)
          done

          if [ "$STATUS" == "FAILED" ]; then
            echo "Container instance creation failed."
            # Delete the failed container instance
            oci container-instances container-instance delete --container-instance-id "$INSTANCE_ID" --force
            echo "Deleting failed container instance with ID: $INSTANCE_ID"
            exit 1
          fi

          echo "Container instance is ACTIVE. Proceeding with the deployment."

      - name: Post build actions (send notification and cleanup)
        run: |
          # Notify of success or failure
          if [ $? -eq 0 ]; then
            echo "Deployment successful."
            # Add notification code here (e.g., using OCI Notifications or another service)
          else
            echo "Deployment failed. Reverting changes."
            # Add rollback or cleanup logic here
            exit 1
          fi
        shell: bash
        env:
          OCI_CLI_REGION: "ap-mumbai-1"
          OCI_COMPARTMENT_OCID: "ocid1.tenancy.oc1..aaaaaaaapeqpb7s6neeq7jnlby7ftkcn6se7g6soav5mzjzg2co3foauuctq"
          OCI_SUBNET_OCID: "your_subnet_ocid"
