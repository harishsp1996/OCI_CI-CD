name: Build, Tag, Push Docker Image, and Manage OCI Container

on:
  push:
    branches:
      - main

jobs:
  build-publish-manage:
    name: Build, Push Docker Image, and Manage OCI Container
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCI_COMPARTMENT_OCID: ${{ secrets.OCI_COMPARTMENT_OCID }}
      OCIR_REGISTRY: ${{ secrets.OCIR_REGISTRY }}
      OCI_AUTH_TOKEN: ${{ secrets.OCI_AUTH_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up OCI CLI
        uses: oracle-actions/run-oci-cli-command@v1.3.2  # Corrected action to set up OCI CLI
        with:
          command: 'oci --version'
        env:
          OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
          OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}

      - name: Get or create an OCIR repository
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        id: get-ocir-repository
        with:
          command: 'oci os bucket list --compartment-id $OCI_COMPARTMENT_OCID'
          query: 'data[0].name'

      - name: Log into OCIR
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        with:
          command: 'oci iam policy create --compartment-id $OCI_COMPARTMENT_OCID --name "oci-cli-policy" --statements "[\"oci:compute:instance:*\"]"'
        env:
          OCI_AUTH_TOKEN: ${{ secrets.OCI_AUTH_TOKEN }}

      - name: Determine new version tag
        id: determine-version
        run: |
          if [ -f .version ]; then
            VERSION=$(cat .version)
            echo "Current version: $VERSION"
          else
            VERSION="v1.0.0"
            echo "No version file found. Starting with version: $VERSION"
          fi
          BASE_VERSION=$(echo "$VERSION" | sed 's/v//')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "Next version: $NEW_VERSION"
          echo "$NEW_VERSION" > .version
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit version file
        run: |
          git config --local user.name "your-username"
          git config --local user.email "your-email@example.com"
          git add .version
          git commit -m "Update version to $VERSION"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          VERSION="${{ env.VERSION }}"
          echo "VERSION: $VERSION"
          docker buildx build --platform linux/amd64 -t cicd:$VERSION .
          docker tag cicd:$VERSION ${{ steps.get-ocir-repository.outputs.repo_path }}:$VERSION
          docker tag cicd:$VERSION ${{ steps.get-ocir-repository.outputs.repo_path }}:latest

      - name: Push Docker image to OCIR
        run: |
          VERSION="${{ env.VERSION }}"
          docker push ${{ steps.get-ocir-repository.outputs.repo_path }}:$VERSION
          docker push ${{ steps.get-ocir-repository.outputs.repo_path }}:latest

      - name: Check for existing container instance
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        id: check-instance
        with:
          command: 'oci container-instances container-instance list --compartment-id $OCI_COMPARTMENT_OCID --display-name "my-container-instance" --query "data[0].id" --raw-output'
        env:
          OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
          OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
        continue-on-error: true

      - name: Confirm and Delete Existing Container Instance
        run: |
          INSTANCE_ID="${{ steps.check-instance.outputs.raw_output }}"
          if [ -n "$INSTANCE_ID" ]; then
            echo "Existing container instance found with ID: $INSTANCE_ID"
            read -p "Do you want to delete this container instance? (y/n): " CONFIRM
            if [ "$CONFIRM" == "y" ]; then
              echo "Deleting existing container instance with ID: $INSTANCE_ID"
              oci container-instances container-instance delete --container-instance-id "$INSTANCE_ID" --force
            else
              echo "Skipping deletion. Moving to new container creation."
            fi
          else
            echo "No existing container instance found."
          fi

      - name: Create new container instance
        run: |
          VERSION="${{ env.VERSION }}"
          NEW_INSTANCE=$(oci container-instances container-instance create --compartment-id $OCI_COMPARTMENT_OCID \
            --display-name "my-container-instance" \
            --container-configs '[{"image":"${{ steps.get-ocir-repository.outputs.repo_path }}:'"$VERSION"'"}]' \
            --query "data.id" --raw-output)
          echo "New container instance ID: $NEW_INSTANCE"
