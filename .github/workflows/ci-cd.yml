name: Delete OCI Container Instance

on:
  push:
    branches:
      - main

jobs:
  delete-container:
    name: Delete OCI Container Instance
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCI_COMPARTMENT_OCID: ${{ secrets.OCI_COMPARTMENT_OCID }}
      OCI_AUTH_TOKEN: ${{ secrets.OCI_AUTH_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install OCI CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install oci-cli

      - name: Delete OCI Container Instance
        run: |
          # Define the container instance name
          INSTANCE_NAME="icsapplication-v1.0.2"  # Update this to your container instance name

          echo "Searching for container instance with name: $INSTANCE_NAME"

          # Find the container instance ID using its display name
          INSTANCE_ID=$(oci container-instances container-instance list \
            --compartment-id "$OCI_COMPARTMENT_OCID" \
            --query "data[?lifecycle-state != 'DELETED' && display-name == '${INSTANCE_NAME}'].id | [0]" --raw-output)

          if [ -z "$INSTANCE_ID" ]; then
            echo "No container instance found with name: $INSTANCE_NAME"
            exit 1
          fi

          echo "Container instance ID found: $INSTANCE_ID. Proceeding to delete..."

          # Delete the container instance
          oci container-instances container-instance delete \
            --container-instance-id "$INSTANCE_ID" \
            --force \
            --wait-for-state DELETED

          echo "Container instance $INSTANCE_NAME deleted successfully."
