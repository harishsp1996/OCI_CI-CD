# Variables
VERSION="${{ env.VERSION }}"
IMAGE_PATH="${{ steps.get-ocir-repository.outputs.repo_path }}:$VERSION"
INSTANCE_NAME="icsapp$VERSION"
SHAPE_CONFIG_JSON='{"ocpus": 2, "memoryInGBs": 2}'
VNIC_JSON="[{\"subnetId\": \"$SUBNET_OCID\"}]"
CONTAINER_JSON="[{
  \"imageUrl\": \"$IMAGE_PATH\"
}]"

# Create new container instance
NEW_INSTANCE=$(oci container-instances container-instance create \
  --compartment-id "$OCI_COMPARTMENT_OCID" \
  --availability-domain "$LOGICAL_AD" \
  --shape "CI.Standard.E4.Flex" \
  --shape-config "$SHAPE_CONFIG_JSON" \
  --containers "$CONTAINER_JSON" \
  --vnics "$VNIC_JSON" \
  --display-name "$INSTANCE_NAME" \
  --query "data.id" --raw-output)

# Wait for the instance to reach ACTIVE state
echo "Waiting for container instance to become ACTIVE..."
while true; do
  STATUS=$(oci container-instances container-instance get \
    --container-instance-id "$NEW_INSTANCE" \
    --query "data.lifecycle-state" --raw-output)

  if [ "$STATUS" == "ACTIVE" ]; then
    echo "Container instance is ACTIVE."
    break
  elif [ "$STATUS" == "FAILED" ]; then
    echo "Container instance creation FAILED. Deleting..."
    oci container-instances container-instance delete --container-instance-id "$NEW_INSTANCE" --force
    while true; do
      DELETE_STATUS=$(oci container-instances container-instance get \
        --container-instance-id "$NEW_INSTANCE" \
        --query "data.lifecycle-state" --raw-output 2>/dev/null || echo "DELETED")
      if [ "$DELETE_STATUS" == "DELETED" ]; then
        echo "Failed instance deleted successfully."
        break
      fi
      sleep 10
    done
    exit 1
  fi
  echo "Current status: $STATUS. Retrying in 10 seconds..."
  sleep 10
done
