name: Build, Tag, Push Docker Image, and Manage OCI Container

on:
  push:
    branches:
      - main

jobs:
  build-publish-manage:
    name: Build, Push Docker Image, and Manage OCI Container
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      OCI_COMPARTMENT_OCID: ${{ secrets.OCI_COMPARTMENT_OCID }}
      OCIR_REGISTRY: ${{ secrets.OCIR_REGISTRY }}
      OCI_AUTH_TOKEN: ${{ secrets.OCI_AUTH_TOKEN }}
      LOGICAL_AD: ${{ secrets.LOGICAL_AD }}
      SUBNET_OCID: ${{ secrets.SUBNET_OCID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      OCI_NOTIFICATION_TOPIC_OCID: ${{ secrets.OCI_NOTIFICATION_TOPIC_OCID }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install OCI CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install oci-cli

      - name: Get or create an OCIR repository
        uses: oracle-actions/get-ocir-repository@v1.3.0
        id: get-ocir-repository
        with:
          name: cicd
          compartment: ${{ secrets.OCI_COMPARTMENT_OCID }}

      - name: Log into OCIR
        uses: oracle-actions/login-ocir@v1.3.0
        with:
          auth_token: ${{ secrets.OCI_AUTH_TOKEN }}

      - name: Determine new version tag
        id: determine-version
        run: |
          if [ -f .version ]; then
            VERSION=$(cat .version)
            echo "Current version: $VERSION"
          else
            VERSION="v9.0.0"
            echo "No version file found. Starting with version: $VERSION"
          fi
          BASE_VERSION=$(echo "$VERSION" | sed 's/v//')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "Next version: $NEW_VERSION"
          echo "$NEW_VERSION" > .version
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit version file
        run: |
          git config --local user.name "harishsp1996"
          git config --local user.email "harish.sp.4196@gmail.com"
          git add .version
          git commit -m "Update version to $NEW_VERSION"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          VERSION="${{ env.VERSION }}"
          docker buildx build --platform linux/amd64 -t cicd:$VERSION .
          docker tag cicd:$VERSION ${{ steps.get-ocir-repository.outputs.repo_path }}:$VERSION
          docker tag cicd:$VERSION ${{ steps.get-ocir-repository.outputs.repo_path }}:latest

      - name: Push Docker image to OCIR
        run: |
          VERSION="${{ env.VERSION }}"
          docker push ${{ steps.get-ocir-repository.outputs.repo_path }}:$VERSION
          docker push ${{ steps.get-ocir-repository.outputs.repo_path }}:latest

      - name: Delete current container instance and wait for status to transition to DELETED
        run: |
          CURRENT_VERSION=$(cat .version)
          BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/v//')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          PATCH=$((PATCH - 1))
          PREVIOUS_VERSION="v$MAJOR.$MINOR.$PATCH"
          CURRENT_INSTANCE_NAME="icsapp$CURRENT_VERSION"

          # Get the current container instance ID
          INSTANCE_ID=$(oci container-instances container-instance list \
            --compartment-id "$OCI_COMPARTMENT_OCID" \
            --region "$OCI_CLI_REGION" \
            --raw-output | jq -r '.data.items[] | select(.["display-name"] == "'$CURRENT_INSTANCE_NAME'" and .["lifecycle-state"] == "FAILED") | .id')

          if [ -n "$INSTANCE_ID" ]; then
            # Delete the current container instance
            oci container-instances container-instance delete \
              --container-instance-id "$INSTANCE_ID" \
              --force
            echo "Deleted failed container instance: $CURRENT_INSTANCE_NAME"

            # Wait for the container instance to transition to DELETED state
            while true; do
              STATUS=$(oci container-instances container-instance get \
                --container-instance-id "$INSTANCE_ID" \
                --query "data.lifecycle-state" --raw-output 2>/dev/null || echo "DELETED")

              echo "Current status: $STATUS"

              if [ "$STATUS" == "DELETED" ]; then
                echo "Container instance successfully deleted."
                break
              fi
              sleep 10
            done
          else
            echo "No failed instance found for $CURRENT_INSTANCE_NAME."
          fi

      - name: Create new container instance and wait for status
        run: |
          VERSION="${{ env.VERSION }}"
          IMAGE_PATH="${{ steps.get-ocir-repository.outputs.repo_path }}:$VERSION"
          INSTANCE_NAME="icsapp$VERSION"
          SHAPE_CONFIG_JSON='{"ocpus": 2, "memoryInGBs": 2}'
          VNIC_JSON="[{\"subnetId\": \"$SUBNET_OCID\"}]"
          CONTAINER_JSON="[{\"imageUrl\": \"$IMAGE_PATH\"}]"

          NEW_INSTANCE=$(oci container-instances container-instance create \
            --compartment-id "$OCI_COMPARTMENT_OCID" \
            --availability-domain "$LOGICAL_AD" \
            --shape "CI.Standard.E4.Flex" \
            --shape-config "$SHAPE_CONFIG_JSON" \
            --containers "$CONTAINER_JSON" \
            --vnics "$VNIC_JSON" \
            --display-name "$INSTANCE_NAME" \
            --query "data.id" --raw-output)

          echo "Created new container instance with ID: $NEW_INSTANCE"

          while true; do
            echo "Checking lifecycle state of $INSTANCE_NAME..."
            CURRENT_STATUS=$(oci container-instances container-instance list \
              --compartment-id "$OCI_COMPARTMENT_OCID" \
              --region "$OCI_CLI_REGION" \
              --raw-output | jq -r '.data.items[] | select(.["display-name"] == "'$INSTANCE_NAME'") | .["lifecycle-state"]')

            echo "Current status: $CURRENT_STATUS"

            if [[ "$CURRENT_STATUS" == "ACTIVE" ]]; then
              echo "Status ACTIVE found, breaking the loop."
              oci ons message publish --topic-id $OCI_NOTIFICATION_TOPIC_OCID \
                --body "{\"status\": \"success\", \"version\": \"$VERSION\", \"message\": \"Build and deployment successful.\"}"
              break
            elif [[ "$CURRENT_STATUS" == "FAILED" ]]; then
              echo "Status FAILED found, reverting to previous image (n-1)."

              # Determine previous version (n-1)
              BASE_VERSION=$(echo "$VERSION" | sed 's/v//')
              IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
              PATCH=$((PATCH - 1))
              PREVIOUS_VERSION="v$MAJOR.$MINOR.$PATCH"
              PREVIOUS_IMAGE_PATH="${{ steps.get-ocir-repository.outputs.repo_path }}:$PREVIOUS_VERSION"
              INSTANCE_NAME="icsapp$PREVIOUS_VERSION"

              # Create a new container instance with the previous image (n-1)
              PREVIOUS_INSTANCE=$(oci container-instances container-instance create \
                --compartment-id "$OCI_COMPARTMENT_OCID" \
                --availability-domain "$LOGICAL_AD" \
                --shape "CI.Standard.E4.Flex" \
                --shape-config "$SHAPE_CONFIG_JSON" \
                --containers "[{\"imageUrl\": \"$PREVIOUS_IMAGE_PATH\"}]" \
                --vnics "$VNIC_JSON" \
                --display-name "$INSTANCE_NAME" \
                --query "data.id" --raw-output)

              echo "Created new container instance with ID: $PREVIOUS_INSTANCE"

              while true; do
                echo "Checking lifecycle state of previous image (n-1)..."
                PREVIOUS_STATUS=$(oci container-instances container-instance list \
                  --compartment-id "$OCI_COMPARTMENT_OCID" \
                  --region "$OCI_CLI_REGION" \
                  --raw-output | jq -r '.data.items[] | select(.["display-name"] == "'$INSTANCE_NAME'") | .["lifecycle-state"]')

                echo "Current status of previous image (n-1): $PREVIOUS_STATUS"

                if [[ "$PREVIOUS_STATUS" == "ACTIVE" ]]; then
                  echo "Previous image (n-1) is now ACTIVE. Deployment reverted successfully."
                  oci ons message publish --topic-id $OCI_NOTIFICATION_TOPIC_OCID \
                    --body "{\"status\": \"success\", \"version\": \"$PREVIOUS_VERSION\", \"message\": \"Deployment reverted to previous version (n-1) successfully.\"}"
                  break
                elif [[ "$PREVIOUS_STATUS" == "FAILED" ]]; then
                  echo "Previous image (n-1) deployment failed. No further steps possible."
                  oci ons message publish --topic-id $OCI_NOTIFICATION_TOPIC_OCID \
                    --body "{\"status\": \"failure\", \"version\": \"$PREVIOUS_VERSION\", \"message\": \"Deployment failed for both current and previous versions.\"}"
                  break
                fi
                sleep 10
              done

              # Revert version file to previous version
              echo "Reverting version file to previous version: $PREVIOUS_VERSION"
              echo "$PREVIOUS_VERSION" > .version
              git config --local user.name "harishsp1996"
              git config --local user.email "harish.sp.4196@gmail.com"
              git add .version
              git commit -m "Revert to previous version: $PREVIOUS_VERSION"
              git push
              break
            fi
            sleep 10
          done
